#!/bin/bash

# Load up the functions we need to use from the
# library. It will be located in the same directory
# as this script.
source $(dirname $0)/service_funcs

# make sure you have underscore-cli installed
npm -g list underscore-cli | grep underscore-cli > /dev/null
if (( $? != 0 )); then
  echo "Must install underscore-cli NPM package first!"
  echo ""
  echo "  sudo npm install -g underscore-cli"
  exit 1
fi

which md5sum > /dev/null
if (( $? == 0 )); then
  MD5=md5sum
else
  which md5 > /dev/null
  if (( $? == 0 )); then
    MD5=md5
  else
    echo "Can't find a suitable 'md5' implementation. So sorry."
    exit 1
  fi
fi

usage() {
  cat <<EOF
  usage: $0 options

  This script will attempt to set up an account for
  PCC pulls. It will handle the setup for the MDS push
  to as well as the configured account/account
  mapping required for PCC.

  OPTIONS:
    -h      Show this message
    -s uri  Specify the root URL for the service server. Default: $SERVICE_HOST
    -t tkn  Specify the API token for the specified service server. Defaults
            to the value of API_TOKEN
    -a id   Specify the account ID to be configured (required)
    -d dir  Specify the directory in which the account's
            mds files will be placed on the PCC sftp server (required)
EOF
}

ACCOUNT_ID=
SFTP_DIR=
# Default these guys to whatever the user sets the environment
# variables to.
SERVICE_HOST=$SERVICES_HOST
SERVICE_API_TOKEN=$API_TOKEN

# Parse the command line options
while getopts "ha:d:s:t:" OPTION
do
  case $OPTION in
    h)
      usage
      exit 1
      ;;
    s)
      SERVICE_HOST=$OPTARG
      ;;
    t)
      SERVICE_API_TOKEN=$OPTARG
      ;;
    a)
      ACCOUNT_ID=$OPTARG
      ;;
    d)
      SFTP_DIR=$OPTARG
      ;;
    ?)
      usage
      exit
      ;;
  esac
done

AUTHENTICATION_HEADER="Authorization: Token token=\"${SERVICE_API_TOKEN}\""

# Make sure we have all the options we need to do our job.

if [ -z "$SERVICE_HOST" ]; then
  echo "Must specify the host for services in the form \"https://serivces.domain.com\""
  echo "You can use the -s <host> option or set the environment variable"
  echo "export SERVICES_HOST=https://services.domain.com"
  usage
  exit 1
fi

if [ -z "$SERVICE_API_TOKEN" ]; then
  echo "Must specify the API_TOKEN for the services host."
  echo "You can use the -t <token> option or set the environment variable"
  echo "export API_TOKEN=abc123"
  usage
  exit 1
fi

if [ -z "$ACCOUNT_ID" ]; then
  echo "Must specify the account id (-a)"
  usage
  exit 1
fi

if [ -z "$SFTP_DIR" ]; then
  echo "Must specify the PCC sftp directory (-d)"
  usage
  exit 1
fi

#################################################################
# Main program
#################################################################

resp=$(getServiceInfo "services/third_parties")
if [ "${resp}" == "HTTP Token: Access denied." ]; then
  echo "Your API_TOKEN is invalid; please correct and try again"
  exit 1
fi

# Get the Providigm Third Party ID
pvdgm_tp_id=$(getSpecifiedId "services/third_parties" "pvdgm")
# Get the MDS Push Service ID
mds_push_id=$(getSpecifiedId "services/services" "mds_push")
# Get the ID of the Providigm Mds Push service definition
svc_def_id=$(getServiceDefinitionId $pvdgm_tp_id $mds_push_id)

# Check to see if the specified account has already been configured
# for this service definition
if [ $(configuredAccountExists $pvdgm_tp_id $svc_def_id $ACCOUNT_ID) == 'true' ]; then
  echo "The account $ACCOUNT_ID has already been configured for Providigm's MDS Push Service"
else
  echo "Configuring account $ACCOUNT_ID for Providigm's MDS Push Service"
  parameters=("configured_account[account_id]=${ACCOUNT_ID}" \
    "configured_account[enabled]=true" \
    "credential[password]=$(date | ${MD5} | cut -c 1-33)")
  postServiceInfo "services/third_parties/$pvdgm_tp_id/service_definitions/$svc_def_id/configured_accounts" ${parameters[@]} > /dev/null
fi

# Now, is there an account mapping setup for this account
pcc_tp_id=$(getSpecifiedId "services/third_parties" "pcc")
mds_pull_id=$(getSpecifiedId "services/services" "mds_pull")
pcc_svc_def_id=$(getServiceDefinitionId $pcc_tp_id $mds_pull_id)
if [ $(accountMappingExists $pcc_tp_id $ACCOUNT_ID) == 'true' ]; then
  echo "The account $ACCOUNT_ID is already mapped for PCC"
else
  echo "Mapping account $ACCOUNT_ID to directory $SFTP_DIR..."
  parameters=("account_mapping[account_id]=${ACCOUNT_ID}" \
    "account_mapping[account_code]=${SFTP_DIR}")
  postServiceInfo "services/third_parties/$pcc_tp_id/account_mappings" ${parameters[@]} > /dev/null
fi

# Finally, to create the configured account for PCC
if [ $(configuredAccountExists $pcc_tp_id $pcc_svc_def_id $ACCOUNT_ID) == 'true' ]; then
  echo "The account $ACCOUNT_ID has already been configured for PCC's MDS Pull Service"
else
  echo "Configuring account $ACCOUNT_ID for PCC's MDS Pull Service"
  parameters=("configured_account[account_id]=${ACCOUNT_ID}" \
    "configured_account[enabled]=true")
  postServiceInfo "services/third_parties/$pcc_tp_id/service_definitions/$pcc_svc_def_id/configured_accounts" ${parameters[@]} > /dev/null
fi
